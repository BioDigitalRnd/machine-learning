Transpose = rearrange the arrays input and weights
|First make the array into Numpy array(np.array) then Transpose by adding .T at the end	  
  			  
- Batch Size will alter the best fit line to best predict:
lower batch size will move around more when more data is given compared to a higher batch size

 Sum, exp, 

zip: iterate over multiple iterables simultaneously


* shape = what the size is at that dimension
	Array:                  	     Shape:
		1 = [1,5,6,2]       		    (4,)
		
		  					Type: 1D array, Vector
		  					if simple list in python then its a 
		  					1D array in numpy and its a Vector in maths
		  		
	Array:              			Shape:
		lol =     [[1,5,6,2],		     (2, 4)
	(list of Lists) [3,2,1,3]]

							Type: 2D array, Matrix(Rectangular Array)
									  		
	Array:              			Shape:
		lolol =     [[[1,5,6,2],		(3, 2, 4)
	(list of Lists     [3,2,1,3]]
	 of lists)        [[5,2,1,2],
	 			   [6,4,8,4]],
	 			  [[2,8,5,3],
	 			   [1,1,9,4]]]
	
							Type: 3D array

Tensor Flow : an object that can be represented as an array

Input =  Vector
Weight = Vector
Bias = Vector


'row' dimension(2nd dimension) list:
- not homologous(each dimension is identically long) therefore can't be an array






