Weights and Bias:
Weights are value associated with the inputs that basically decides how much importance that particular input has on the desired output
Bias are a constant value that is added to the weight to offset the result 
(e.g. input = 1
	 weight = 0.2
	 bias = 2.0
Output = (input * weight + bias))

Output layer : taking input from one of the Hidden layer not from sensors but still output the same stuff
output = inputs[0] * Weights[0] + inputs[1] * Weights[1] + inputs[2] * Weights[2] + bias 

* shape = what the size is at that dimension
	Array:                  	     Shape:
		1 = [1,5,6,2]       		    (4,)
		
		  					Type: 1D array, Vector
		  					if simple list in python then its a 
		  					1D array in numpy and its a Vector in maths
		  		
	Array:              			Shape:
		lol =     [[1,5,6,2],		     (2, 4)
	(list of Lists) [3,2,1,3]]

							Type: 2D array, Matrix(Rectangular Array)
									  		
	Array:              			Shape:
		lolol =     [[[1,5,6,2],		(3, 2, 4)
	(list of Lists     [3,2,1,3]]
	 of lists)        [[5,2,1,2],
	 			   [6,4,8,4]],
	 			  [[2,8,5,3],
	 			   [1,1,9,4]]]
	
							Type: 3D array

Tensor Flow : an object that can be represented as an array

Input =  Vector
Weight = Vector
Bias = Vector

out = weight * input + bias similar to (as it is used to predict something)
y = mx + c

Tuning the bias in such a way to train the neuron
so it can accurately predict if a new data is given

a = [1, 2, 3]
b = [2, 3, 4]

dot_product(.dot) = a[0] * b[0] + a[1] * b[1] + a[2] * b[2] 
  			  = 20
  			  a . b = [1,2,3] . [2,3,4] = 1.2 + 2.3 + 3.4 = 20
  			  
  			  
- Batch Size will alter the best fit line to best predict:
lower batch size will move around more when more data is given compared to a higher batch size

 Sum, exp, 
